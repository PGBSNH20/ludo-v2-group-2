@page "{boardId:int}/{playerNumber:int?}"
@model LudoGameModel
@section Styles {
    <link rel="stylesheet" href="~/css/LudoGame.css" />
    <style>
        @for(int i=0; i<4; i++) {
            @Html.Raw($".player{i + 1}" + "{\n");
            @Html.Raw($"background-color: #{Model.Colors[i].ColorCode}\n");
            @Html.Raw("}\n");
        }
    </style>
}
@section Scripts {
    <script>
    var activePlayerId = @Model.ActivePlayerId;
    var activePlayerIndex = @Model.ActivePlayerIndex;
    var boardId = @Model.BoardId;
    </script>
    <script src="~/js/ludogame.js"></script>
}
@{ 
    ViewData["Title"] = "Play!";
}

<div class="ludoMainBoard @if (Model.IsActivePlayer && Model.PlayerNumber != 0) { @Html.Raw("ludoMainBoardActive") }">
    @* Base Squares *@
    @for (int i = 0; i < 4; i++)
    {
        var isWinner = await Model.IsWinner(i);
        var placement = await Model.GetPlacement(i);
        <div class="ludoBase @("player"+(i+1)) @if (isWinner) { @Html.Raw("winnerbase") }" id="@("ludoBase"+(i+1))">
            @if (isWinner)
            {
                @Html.Raw(Model.AddOrdinal(placement) + " Place!");
            }
            else
            {
                @Model.GetBaseCount(i)
            }
            <div class="@("corner"+i)">@await Model.GetPlayerName(i)</div>
        </div>
    }

    @* Goal Squares *@
    @for (int i = 0; i < 4; i++)
    {
        <div class="goal @("player"+(i+1))" id="@("ludoGoal"+(i+1))">
            @if (Model.GetGoalCount(i) > 0)
            {
                @Model.GetGoalCount(i)
            }
        </div>
    }

    @* Blank/unused squares *@
    <div class="ludoSquare ludoSquareBlank" style="grid-row: 7; grid-column: 7"></div>
    <div class="ludoSquare ludoSquareBlank" style="grid-row: 7; grid-column: 9"></div>
    <div class="ludoSquare @if (Model.IsActivePlayer) { @Html.Raw("activePlayer") }" type="button" id="roll-button" style="grid-row: 8; grid-column: 8">Roll</div>
    <div class="ludoSquare ludoSquareBlank" style="grid-row: 9; grid-column: 7"></div>
    <div class="ludoSquare ludoSquareBlank" style="grid-row: 9; grid-column: 9"></div>

    @* SafeZones *@
    @for (int safeZoneIndex = 0; safeZoneIndex < Model.SafeZones.Count; safeZoneIndex++)
    {
        for (int safeZonePosition = 0; safeZonePosition < Model.SafeZones[safeZoneIndex].Length; safeZonePosition++)
        {
            <div class="ludoSquare safeZone @("player" + (safeZoneIndex+1))" id="p_@(safeZoneIndex+1)_sq_@(safeZonePosition)" style="grid-column: @Model.SafeZones[safeZoneIndex][safeZonePosition].x; grid-row: @Model.SafeZones[safeZoneIndex][safeZonePosition].y;">
                @if (Model.IsOccupied(safeZonePosition, true, safeZoneIndex))
                {
                    <div class="piece @("player" + (safeZoneIndex+1))"></div>
                }
            </div>
        }

    }
    @* Board Squares *@
    @for (int i = 0; i < Model.SquareCoordinates.Length; i++)
    {<div class="ludoSquare" id="sq_@i"
          style="grid-column:@Model.SquareCoordinates[i].x; grid-row:@Model.SquareCoordinates[i].y;">
            @if (Model.IsOccupied(i))
            {
                int playerId = Model.GetPlayerIdAtIndex(i);
                <div class="piece @("player" + (Model.GetPlayerIndex(playerId) + 1))"></div>
            }
        </div>
    }
</div>
<script src="~/js/signalr/dist/browser/signalr.js"></script>